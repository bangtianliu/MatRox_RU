#!/bin/bash
#SBATCH --job-name="SC_code"
#SBATCH --output="ml.%j.%N.out"
#SBATCH --partition=compute
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=24
#SBATCH --mem=120G
#SBATCH --export=ALL
#SBATCH -t 4:00:00

# all SPD matrix files stored in dense column major format
declare -a filearray=(
#"../data/covtype100000.points.bin"
"../data/HIGGS100000.points.bin"
#"../data/mnist60000.points.bin"
"../data/SUSY100000.points.bin"
"../data/letter20000.points.bin"
#"../data/pen10992.points.bin"
#"../data/HEPMASS100000.points.bin"
#"../data/Gas13910.points.bin"
"../data/grid102400.points.bin"
#"../data/random65536.points.bin"
#"../data/dino8w80000.points.bin"
#"../data/sunflower8w80000.points.bin"
#"../data/unit32000.points.bin"
)


#array=(54, 28, 780, 18, 16, 16, 28, 129, 2, 2, 3, 2, 2)
array=(28, 18, 16, 2)
#dim=(100000, 100000, 60000, 100000, 20000, 10992, 100000, 13910, 102400, 65536, 80000, 80000, 32000)
dim=(100000, 100000, 20000, 102400)
lm=(256, 256, 256, 256, 256, 256, 128)
rank=(256, 256, 256, 256, 128, 128)


## data points stored in dense d-by-N format
#points="/home/kobeliu/mldataset/covtype16384.points.bin"

## data dimension

h=5

## problem size
n=4096
## maximum leaf node size
m=256
## maximum off-diagonal ranks
s=256
## number of neighbors
k=32
## number of right hand sides
nrhs=2048
## user tolerance
stol=1e-5
#lim=$[$n/2]
## user computation budget
budget=${1}
## distance type (geometry, kernel, angle)
distance="geometry"
## spdmatrix type (testsuit, dense, kernel, userdefine)
matrixtype="kernel"

export OMP_NUM_THREADS=12
echo "nthreads = $OMP_NUM_THREADS"
# ======= Do not change anything below this line ========
mpiexec=""
executable=./artifact_sc17gofmm.x
echo "@PRIM"
echo 'artifact_sc17gofmm'
# =======================================================

echo "@SETUP"
echo "HMLP_GPU_ARCH = $HMLP_GPU_ARCH"
echo "@SETUP"
echo "HMLP_ARCH = $HMLP_ARCH"
echo "@SETUP"
echo "n = $n"
echo "@SETUP"
echo "m = $m"
echo "@SETUP"
echo "h = $h"
echo "@SETUP"
echo "s = $s"
echo "@SETUP"
echo "k = $k"
echo "@SETUP"
echo "nrhs = $nrhs"
echo "@SETUP"
echo "stol = $stol"
echo "@SETUP"
echo "budget = $budget"
echo "@SETUP"
echo "distance = $distance"
echo "@SETUP"
echo "matrixtype = $matrixtype"
# =======================================================

echo "@DATE"
date

if [ -f "GOFMMoutput" ]; then
  rm -rf GOFMMoutput
fi

if [[ "$matrixtype" == "kernel" ]] ; then
  i=0
  for filename in "${filearray[@]}"

  do
    d=${array[$i]}
    n=${dim[$i]}
    s=256
    m=256

    #budget=0.0

    echo "#s=$s"
    echo "#n=$n"
    nrhs=1
    $mpiexec $executable $n $m $k $s $nrhs $stol $budget $distance $matrixtype $filename $d $h | tee -a GOFMMoutput; status=$?
    nrhs=1024
    $mpiexec $executable $n $m $k $s $nrhs $stol $budget $distance $matrixtype $filename $d $h | tee -a GOFMMoutput; status=$?
    nrhs=2048
    $mpiexec $executable $n $m $k $s $nrhs $stol $budget $distance $matrixtype $filename $d $h | tee -a GOFMMoutput; status=$?
    nrhs=4096
    $mpiexec $executable $n $m $k $s $nrhs $stol $budget $distance $matrixtype $filename $d $h | tee -a GOFMMoutput; status=$?
    echo "@STATUS"
    echo $status

    let i++
  done
fi


grep "Compress" GOFMMoutput | grep -Eo '[+-]?[0-9]+([.][0-9]+)?' | awk 'NR%3==2' > compress.csv
grep "Eval" GOFMMoutput | grep -Eo '[+-]?[0-9]+([.][0-9]+)?' | awk 'NR%2==1' > eval.csv

paste compress.csv eval.csv > gofmm.csv
awk -F "," '{print $1,$2}' gofmm.csv | xargs -n4 -d'\n' > tgofmm.csv

awk -F ",| " '{print $1,$2}' OFS=, tgofmm.csv > tgorhs1.csv
awk -F ",| " '{print $3,$4}' OFS=, tgofmm.csv > tgorhs1k.csv
awk -F ",| " '{print $5,$6}' OFS=, tgofmm.csv > tgorhs2k.csv
awk -F ",| " '{print $7,$8}' OFS=, tgofmm.csv > tgorhs4k.csv



declare -a tfilearray=(
#"covtype"
"higgs-1"
"higgs-1k"
"higgs-2k"
"higgs-4k"
#"mnist"
"susy-1"
"susy-1k"
"susy-2k"
"susy-4k"
"letter-1"
"letter-1k"
"letter-2k"
"letter-4k"
#"pen"
#"hepmass"
#"gas"
"grid-1"
"grid-1k"
"grid-2k"
"grid-4k"
#"random"
#"dino"
#"sunflower"
#"unit"
)

rm data.csv
for filename in "${tfilearray[@]}"
do
  echo "$filename," >> data.csv
done



min=0.0

if [ 1 -eq "$(echo "${budget} > ${min}" | bc)" ]
then
  cat tgorhs1.csv tgorhs1k.csv tgorhs2k.csv tgorhs4k.csv > trhs.csv
  paste data.csv trhs.csv > h2nrhs.csv
else
  cat tgorhs1.csv tgorhs1k.csv tgorhs2k.csv tgorhs4k.csv > trhs.csv
  paste data.csv trhs.csv > hssnrhs.csv
fi


rm tgorhs1.csv
rm tgorhs1k.csv
rm tgorhs2k.csv
rm tgorhs4k.csv
rm trhs.csv
rm data.csv
